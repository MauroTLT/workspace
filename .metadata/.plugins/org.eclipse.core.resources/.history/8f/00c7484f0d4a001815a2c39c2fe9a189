package View;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import Model.Aldeano;
import Model.Autoridad;
import Model.Biblioteca;
import Model.Calle;
import Model.Casilla;
import Model.Delincuente;
import Model.Descampado;
import Model.Gimnasio;
import Model.Hospital;
import Model.Mentalista;
import Model.Protagonista;

@SuppressWarnings("serial")
public class BatallaView extends JDialog {

	public static void main(String[] args) {
		Casilla c = new Casilla();
		c.getPersonajes()[1] = new Protagonista();
		c.getPersonajes()[0] = new Mentalista();
		c.setEdificio(new Hospital());
		BatallaView batalla = new BatallaView(c);
		while(c.getPersonajes()[0].getEnergia() > 0 && c.getPersonajes()[1].getEnergia() > 0) {
			System.out.println("hola");
			batalla.lanzar();
		}
	}
	private final static Random r = new Random();
	private final Color[] colores = {new Color(244, 70, 65), new Color(244, 112, 65), new Color(244, 148, 65), new Color(244, 184, 65), new Color(244, 205, 65), new Color(244, 232, 65), new Color(229, 244, 65), new Color(199, 244, 65), new Color(160, 244, 65), new Color(125, 244, 65)};
	private JLabel protaImg, enemyImg, dado1, dado2, dado3, ronda, damage;
	private JPanel enemyBar, protaBar;
	private Casilla casilla;
	private String prota, enemy;
	private int[] dados;
	private int turno = 0, longitud = 10;
	
	public BatallaView(Casilla casilla) {
		this.protaImg = new JLabel();
		this.enemyImg = new JLabel();
		this.dado1 = new JLabel();
		this.dado2 = new JLabel();
		this.dado3 = new JLabel();
		this.ronda = new JLabel("Turno del Protagonista", SwingConstants.CENTER);
		this.damage = new JLabel("100");
		this.enemyBar = new JPanel();
		this.protaBar = new JPanel();
		this.casilla = casilla;
		this.dados = new int[3];
		this.longitud = (int)casilla.getPersonajes()[0].getEnergia()/10;
		if(casilla.getPersonajes()[1].getRuta().equals("../resources/sprites/maxim.png")) {
			this.prota = "maxim";
		} else if(casilla.getPersonajes()[1].getRuta().equals("../resources/sprites/selan.png")) {
			this.prota = "selan";
		}
		if(casilla.getPersonajes()[0] instanceof Aldeano) {
			this.enemy = "aldeano";
		} else if(casilla.getPersonajes()[0] instanceof Autoridad) {
			this.enemy = "autoridad";
		} else if(casilla.getPersonajes()[0] instanceof Mentalista) {
			this.enemy = "mentalista";
		} else if(casilla.getPersonajes()[0] instanceof Delincuente) {
			this.enemy = "delincuente";
		}
		darFormato(casilla);
	}

	private void darFormato(Casilla casilla) {
		this.setLayout(null);
		if(casilla.getEdificio() instanceof Gimnasio) {
			JLabel background = new JLabel();
			Image bg = new ImageIcon(getClass().getResource("../resources/extras/gymBG.png")).getImage();
			background.setIcon(new ImageIcon(bg.getScaledInstance(800, 600, Image.SCALE_SMOOTH)));
			this.setContentPane(background);
		} else if(casilla.getEdificio() instanceof Descampado) {
			JLabel background = new JLabel();
			Image bg = new ImageIcon(getClass().getResource("../resources/extras/descampadoBG.png")).getImage();
			background.setIcon(new ImageIcon(bg.getScaledInstance(800, 600, Image.SCALE_SMOOTH)));
			this.setContentPane(background);
		} else if(casilla.getEdificio() instanceof Calle) {
			JLabel background = new JLabel();
			Image bg = new ImageIcon(getClass().getResource("../resources/extras/calleBG.png")).getImage();
			background.setIcon(new ImageIcon(bg.getScaledInstance(800, 600, Image.SCALE_SMOOTH)));
			this.setContentPane(background);
		} else if(casilla.getEdificio() instanceof Hospital) {
			JLabel background = new JLabel();
			Image bg = new ImageIcon(getClass().getResource("../resources/extras/hospitalBG.png")).getImage();
			background.setIcon(new ImageIcon(bg.getScaledInstance(800, 600, Image.SCALE_SMOOTH)));
			this.setContentPane(background);
		} else if(casilla.getEdificio() instanceof Biblioteca) {
			JLabel background = new JLabel();
			Image bg = new ImageIcon(getClass().getResource("../resources/extras/biblioBG.png")).getImage();
			background.setIcon(new ImageIcon(bg.getScaledInstance(800, 600, Image.SCALE_SMOOTH)));
			this.setContentPane(background);
		}
		
		this.protaImg.setBounds(250,350,200,200);
		this.protaImg.setIcon(new ImageIcon(getClass().getResource("../resources/sprites/" + prota + "Back.png")));
		this.add(protaImg);
		
		this.enemyImg.setBounds(350,200,200,200);
		Image per = new ImageIcon(getClass().getResource("../resources/sprites/" + enemy + ".png")).getImage();
		this.enemyImg.setIcon(new ImageIcon(per.getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
		this.add(enemyImg);
		
		dados();
		protaBar();
		enemyBar();
		
		this.damage.setBounds(300,350,100,50);
		this.damage.setFont(new Font("TimesRoman", Font.BOLD, 36));
		this.damage.setForeground(Color.red);
		this.add(damage);
		this.damage.setVisible(false);
		
		this.ronda.setBounds(50,100,700,75);
		this.ronda.setFont(new Font("TimesRoman", Font.BOLD, 50));
		this.ronda.setBackground(Color.black);
		this.ronda.setOpaque(true);
		this.ronda.setForeground(Color.lightGray);
		this.ronda.setBorder(BorderFactory.createLineBorder(Color.gray, 5, true));
		this.add(ronda);
		this.ronda.setVisible(false);
		
		this.setModal(true);
		this.setSize(800, 600);
		this.setUndecorated(true);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		this.setVisible(true);
		/*while(casilla.getPersonajes()[0].getEnergia() > 0 && casilla.getPersonajes()[1].getEnergia() > 0) {
			lanzar();			
		}*/
	}

	private void protaBar() {
		this.protaBar = new JPanel();
		this.protaBar.setBackground(new Color(0,0,0,0));
		this.protaBar.setBorder(BorderFactory.createLineBorder(Color.lightGray, 5, true));
		this.protaBar.setLayout(new GridLayout(1,10));
		for (int i = 0; i < colores.length; i++) {
			JLabel label = new JLabel();
			if((i*10) >= casilla.getPersonajes()[1].getEnergia()) {
				label.setBackground(new Color(0,0,0,0));
			} else {
				label.setBackground(colores[i]);
			}
			label.setOpaque(true);
			this.protaBar.add(label);
		}
		this.protaBar.setBounds(400,450,200,30);
		this.add(protaBar);
		this.protaBar.repaint();
	}
	
	private void enemyBar() {
		this.enemyBar = new JPanel();
		this.enemyBar.setBackground(new Color(0,0,0,0));
		this.enemyBar.setBorder(BorderFactory.createLineBorder(Color.lightGray, 5, true));
		this.enemyBar.setLayout(new GridLayout(1,10));
		for (int i = 0; i < longitud; i++) {
			JLabel label = new JLabel();
			if((i*10) >= casilla.getPersonajes()[0].getEnergia()) {
				label.setBackground(new Color(0,0,0,0));
			} else {
				label.setBackground(colores[i]);
			}
			label.setOpaque(true);
			this.enemyBar.add(label);
		}
		this.enemyBar.setBounds(100,275,200,30);
		this.add(enemyBar);
		this.enemyBar.repaint();
	}

	private void dados() {
		if(this.dado1.isVisible()) {
			int num = r.nextInt(6) + 1;
			System.out.println("num1" + num);
			this.dado1.setBounds(210, 40, 100, 100);
			this.dado1.setIcon(new ImageIcon(getClass().getResource("../resources/extras/" + num + ".png")));
			this.add(dado1);
			this.dado1.setVisible(false);
			this.dados[0] = num;
			
			num = r.nextInt(6) + 1;
			System.out.println("num2" + num);
			this.dado2.setBounds(345, 40, 100, 100);
			this.dado2.setIcon(new ImageIcon(getClass().getResource("../resources/extras/" + num + ".png")));
			this.add(dado2);
			this.dado2.setVisible(false);
			this.dados[1] = num;

			num = r.nextInt(6) + 1;
			System.out.println("num3" + num);
			this.dado3.setBounds(480, 40, 100, 100);
			this.dado3.setIcon(new ImageIcon(getClass().getResource("../resources/extras/" + num + ".png")));
			this.add(dado3);
			this.dado3.setVisible(false);
			this.dados[2] = num;
		}
	}
	
	public void lanzar() {
		try {
			if (turno % 2 == 0) {
				this.ronda.setText("Turno del Protagonista");
			} else {
				this.ronda.setText("Turno del Enemigo");
			}
			this.ronda.setHorizontalAlignment(SwingConstants.CENTER);
			this.ronda.setVisible(true);
			Thread.sleep(2000);
			this.ronda.setVisible(false);
			Thread.sleep(750);
			this.dado1.setVisible(true);
			Thread.sleep(750);
			this.dado2.setVisible(true);
			Thread.sleep(750);
			this.dado3.setVisible(true);
			Thread.sleep(2750);
			if (turno % 2 == 0) {
				Image per = new ImageIcon(getClass().getResource("../resources/sprites/" + enemy + ".png")).getImage();
				this.enemyImg.setIcon(new ImageIcon(per.getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
				this.protaImg.setIcon(new ImageIcon(getClass().getResource("../resources/sprites/" + prota + ".gif")));
				this.damage.setText("" + danio());
				casilla.getPersonajes()[0].setEnergia(casilla.getPersonajes()[0].getEnergia()-danio());
				this.enemyBar.setVisible(false);
				this.enemyBar = null;
				enemyBar();
				System.out.println(casilla.getPersonajes()[0].getEnergia());
				Thread.sleep(1000);
				this.protaImg.setIcon(new ImageIcon(getClass().getResource("../resources/sprites/" + prota + "Back.png")));
			} else {
				this.protaImg.setIcon(new ImageIcon(getClass().getResource("../resources/sprites/" + prota + "Back.png")));
				this.enemyImg.setIcon(new ImageIcon(getClass().getResource("../resources/sprites/" + enemy + ".gif")));
				this.damage.setText("" + danio());
				casilla.getPersonajes()[1].setEnergia(casilla.getPersonajes()[1].getEnergia()-danio());
				this.protaBar.setVisible(false);
				this.protaBar = null;
				protaBar();
				System.out.println(casilla.getPersonajes()[1].getEnergia());
				Thread.sleep(1000);
				Image per = new ImageIcon(getClass().getResource("../resources/sprites/" + enemy + ".png")).getImage();
				this.enemyImg.setIcon(new ImageIcon(per.getScaledInstance(150, 150, Image.SCALE_SMOOTH)));
			}
			damage();
			dados();
			this.turno++;
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private int danio() { //(18 × 1.5) × 0.75 + (18 × 1.5) × 0.25 maximo teorico daño enemigo
		int sumaDados = dados[0] + dados[1] + dados[2];
		System.out.println(sumaDados);
		double resultado = 0;
		if(turno % 2 == 0) {
			resultado = (sumaDados * casilla.getPersonajes()[1].getFuerza())*0.75;
			System.out.println(resultado);
			resultado += (sumaDados * casilla.getPersonajes()[1].getSabiduria())*0.25;
			System.out.println(resultado);
			return (int) resultado;
		} else {
			resultado = sumaDados * (casilla.getPersonajes()[0].getFuerza())*0.75;
			System.out.println(resultado);
			resultado += sumaDados * (casilla.getPersonajes()[0].getSabiduria())*0.25;
			System.out.println(resultado);
			return (int) resultado;
		}
	}

	private void damage() {
		this.damage.setVisible(true);
		while(this.damage.getLocation().getY() >= 250) {
			this.damage.setLocation(300, (int)this.damage.getLocation().getY()-5);
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		this.damage.setVisible(false);
		this.damage.setLocation(300, 350);
		
	}

}
