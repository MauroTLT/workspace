package Controller;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;

import javax.swing.JOptionPane;

import Conexion.Conexion;
import Model.TableroModel;
import View.PuntosView;
import View.TitleView;

public class TitleController implements KeyListener, MouseListener {
	private int tiempo = 4;
	private boolean semaforo = false, cargarPartida = false;
	private TitleView ventana;
	private PuntosView puntuacion;
	
	public TitleController() {
		this.ventana = new TitleView();
		this.puntuacion = null;
		setActions();
		lanzar();
	}

	private void setActions() {
		this.ventana.addMouseListener(this);
		this.ventana.addKeyListener(this);
		this.ventana.getNuevo().addMouseListener(this);
		this.ventana.getCargar().addMouseListener(this);
		this.ventana.getPuntos().addMouseListener(this);
		this.ventana.getSalir().addMouseListener(this);
	}

	private void lanzar() {
		try {
			Thread.sleep(1000);
			while(this.ventana.getTitulo().getLocation().getY() <= 200) {
				this.ventana.getTitulo().setLocation(120, (int) (this.ventana.getTitulo().getLocation().getY()+5));
				Thread.sleep(40);
			}
			Thread.sleep(1500);
			this.ventana.getPulsa().setVisible(true);
			while(!semaforo && tiempo > 0) {
				while(this.ventana.getPulsa().getForeground().getAlpha() < 250 && !semaforo) { // al reves > 0 | -15 y cambiar a 255 en el primer foreground // del derecho < 255 | +15 y cambiar a 0 en el primer foreground
					this.ventana.getPulsa().setForeground(new Color(
							this.ventana.getPulsa().getForeground().getRed(),
							this.ventana.getPulsa().getForeground().getGreen(),
							this.ventana.getPulsa().getForeground().getBlue(),
							this.ventana.getPulsa().getForeground().getAlpha() + 10));
					Thread.sleep(150);
				}                                                                                           
				while(this.ventana.getPulsa().getForeground().getAlpha() > 90 && !semaforo) { // al reves > 0 | -15 y cambiar a 255 en el primer foreground // del derecho < 255 | +15 y cambiar a 0 en el primer foreground
					this.ventana.getPulsa()
							.setForeground(new Color(this.ventana.getPulsa().getForeground().getRed(),
									this.ventana.getPulsa().getForeground().getGreen(),
									this.ventana.getPulsa().getForeground().getBlue(),
									this.ventana.getPulsa().getForeground().getAlpha() - 10));
					Thread.sleep(150);         
				}
				System.out.println(tiempo);
				tiempo--;
			}
			if (this.ventana.getPulsa().isVisible()) {
				this.semaforo = true;
				this.ventana.getPulsa().setVisible(false);
				this.ventana.crearOpciones();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		while(ventana.isShowing()) {try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}}
		
	}
	
	private void lanzarPuntuaciones() {
		ArrayList<Integer> numeros = FicheroController.getInstance().leer();
		Collections.sort(numeros, Collections.reverseOrder());
		this.puntuacion = new PuntosView(numeros);
	}

	@Override
	public void keyTyped(KeyEvent e) {}

	@Override
	public void keyPressed(KeyEvent e) {
		if (this.ventana.getPulsa().isVisible()) {
			this.semaforo = true;
			this.ventana.getPulsa().setVisible(false);
			this.ventana.crearOpciones();
		} else if(e.getKeyCode() == KeyEvent.VK_UP) {
			this.ventana.changeOption(1);
		} else if(e.getKeyCode() == KeyEvent.VK_DOWN) {
			this.ventana.changeOption(2);
		} else if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if(this.ventana.getLt1().isVisible()) {
				this.ventana.dispose();
			} else if(this.ventana.getLt3().isVisible()) {
				lanzarPuntuaciones();
			} else if(this.ventana.getLt4().isVisible()) {
				TableroModel prueba = Conexion.getInstance().cargar();
				if(prueba == null) {
					JOptionPane.showMessageDialog(null, "No hay ninguna partida que cargar.");
				} else {
					prueba = null;
					this.cargarPartida = true;
					this.ventana.dispose();
				}
			} else if(this.ventana.getLt2().isVisible()) {
				System.exit(0);
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {}

	@Override
	public void mouseClicked(MouseEvent e) {
		if (this.ventana.getPulsa().isVisible()) {
			this.semaforo = true;
			this.ventana.getPulsa().setVisible(false);
			this.ventana.crearOpciones();
		} else if(e.getSource() == this.ventana.getNuevo()) {
			this.ventana.dispose();
		} else if(e.getSource() == this.ventana.getPuntos()) {
			lanzarPuntuaciones();
		} else if(e.getSource() == this.ventana.getCargar()) {
			TableroModel prueba = Conexion.getInstance().cargar();
			if(prueba == null) {
				JOptionPane.showMessageDialog(null, "No hay ninguna partida que cargar.");
			} else {
				prueba = null;
				this.cargarPartida = true;
				this.ventana.dispose();
			}
		} else if(e.getSource() == this.ventana.getSalir()) {
			System.exit(0);
		}
	}

	@Override
	public void mousePressed(MouseEvent e) {}

	@Override
	public void mouseReleased(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) {
		if(e.getSource() == this.ventana.getNuevo()) {
			this.ventana.ocultar();
			this.ventana.getLt1().setVisible(true);
			this.ventana.getGt1().setVisible(true);
		} else if(e.getSource() == this.ventana.getCargar()) {
			this.ventana.ocultar();
			this.ventana.getLt4().setVisible(true);
			this.ventana.getGt4().setVisible(true);
		} else if(e.getSource() == this.ventana.getPuntos()) {
			this.ventana.ocultar();
			this.ventana.getLt3().setVisible(true);
			this.ventana.getGt3().setVisible(true);
		} else if(e.getSource() == this.ventana.getSalir()) {
			this.ventana.ocultar();
			this.ventana.getLt2().setVisible(true);
			this.ventana.getGt2().setVisible(true);
		}
	}

	@Override
	public void mouseExited(MouseEvent e) {}
	
	public TitleView getVentana() {
		return ventana;
	}

	public void setVentana(TitleView ventana) {
		this.ventana = ventana;
	}

	public boolean isSemaforo() {
		return semaforo;
	}

	public void setSemaforo(boolean semaforo) {
		this.semaforo = semaforo;
	}

	public int getTiempo() {
		return tiempo;
	}

	public void setTiempo(int tiempo) {
		this.tiempo = tiempo;
	}

	public boolean isCargarPartida() {
		return cargarPartida;
	}

	public void setCargarPartida(boolean cargarPartida) {
		this.cargarPartida = cargarPartida;
	}

	public PuntosView getPuntuacion() {
		return puntuacion;
	}

	public void setPuntuacion(PuntosView puntuacion) {
		this.puntuacion = puntuacion;
	}

}
