package Model;

import java.util.Random;

public class TableroModel {

	private static int dificultad; //Dificultad de la partida
	private Dado dado; //Instancia del Dado
	private Casilla[][] casillas; // Matriz de casillas(Tablero)

	public TableroModel(int dificultad) {
		TableroModel.dificultad = dificultad;
		this.dado = new Dado();
		this.casillas = new Casilla[11][11];
		darFormato();
	}
	/*
	 * Metodo que le da el formato a cada casilla
	 * Imagen, Edificio, Evento...
	 */
	private void darFormato() {
		Random r = new Random();
		int aux = 0;
		boolean semaforo = false;
		for (int i = 0; i < casillas.length; i++) {
			for (int j = 0; j < casillas[i].length; j++) {
				this.casillas[i][j] = new Casilla();
				this.casillas[i][j].setEvento(Recompensa.getInstance());
				if (i % 2 == 0 || j % 2 == 0) { //Si es una Calle
					this.casillas[i][j].setEdificio(new Calle());
					//Elegimos la imagen en base a su posicion en el tablero
					if(i == 0 && j == 0) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/up-left.png");
					} else if(i == 0 && j == 10) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/up-right.png");
					} else if(i == 10 && j == 0) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/bottom-left.png");
					} else if(i == 10 && j == 10) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/bottom-right.png");
					} else if(i == 0) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/up.png");
					} else if(j == 0) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/left.png");
					} else if(j == 10) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/right.png");
					} else if(i == 10) {
						this.casillas[i][j].getEdificio().setRuta("../resources/buildings/bottom.png");
					}
				} else { //Si no es una calle
					semaforo = false;
					while (!semaforo) {
						aux = r.nextInt(4);
						if (Gimnasio.getPuestas() < 6 && aux == 0) {
							this.casillas[i][j].setEdificio(new Gimnasio());
							semaforo = true;
							Gimnasio.setPuestas(Gimnasio.getPuestas() + 1);
						} else if (Hospital.getPuestas() < 6 && aux == 1) {
							this.casillas[i][j].setEdificio(new Hospital());
							semaforo = true;
							Hospital.setPuestas(Hospital.getPuestas() + 1);
						} else if (Biblioteca.getPuestas() < 6 && aux == 2) {
							this.casillas[i][j].setEdificio(new Biblioteca());
							semaforo = true;
							Biblioteca.setPuestas(Biblioteca.getPuestas() + 1);
						} else if (Descampado.getPuestas() < 7 && aux == 3) {
							this.casillas[i][j].setEdificio(new Descampado());
							semaforo = true;
							Descampado.setPuestas(Descampado.getPuestas() + 1);
						}
					}
				}
			}
		}
		spawnEnemies(r);
	}
	/*
	 * Metodo con el algoritmo que crea y posiciona los enemigos en el mapa
	 */
	private void spawnEnemies(Random r) {
		int fila = 0, columna = 0;
		int aldeano = 0, mentalista = 0, autoridad = 0, delincuente = 0;
		for (int i = 0; i < (dificultad*4); i++) { //El bucle tiene en cuenta la dificultad para generar enemigos
			fila = r.nextInt(11);
			columna = r.nextInt(11);
			if (fila != 5 && columna != 5 && this.casillas[fila][columna].getPersonajes()[0] == null) {
				if (aldeano < dificultad) {
					this.casillas[fila][columna].getPersonajes()[0] = new Aldeano();
					this.casillas[fila][columna].setEvento(Combate.getInstance());
					aldeano++;
				} else if (mentalista < dificultad) {
					this.casillas[fila][columna].getPersonajes()[0] = new Mentalista();
					this.casillas[fila][columna].setEvento(Combate.getInstance());
					mentalista++;
				} else if (autoridad < dificultad) {
					this.casillas[fila][columna].getPersonajes()[0] = new Autoridad();
					this.casillas[fila][columna].setEvento(Combate.getInstance());
					autoridad++;
				} else if (delincuente < dificultad) {
					this.casillas[fila][columna].getPersonajes()[0] = new Delincuente();
					this.casillas[fila][columna].setEvento(Combate.getInstance());
					delincuente++;
				}
			} else {i--;}
		}
		//Colocamos al Protagonista en el centro (Posicion fija)
		this.casillas[5][5].getPersonajes()[1] = new Protagonista();
	}
	
	/*
	 * Getters y setters
	 */

	public Dado getDado() {
		return dado;
	}

	public void setDado(Dado dado) {
		this.dado = dado;
	}

	public Casilla[][] getCasillas() {
		return casillas;
	}

	public void setCasillas(Casilla[][] casillas) {
		this.casillas = casillas;
	}

	public int getDificultad() {
		return dificultad;
	}

	public void setDificultad(int dificultad) {
		TableroModel.dificultad = dificultad;
	}

}
