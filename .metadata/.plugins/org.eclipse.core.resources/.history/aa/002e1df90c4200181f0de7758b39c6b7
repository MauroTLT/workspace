package resources;

import java.io.File;
import java.io.IOException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine.Info;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;

import static javax.sound.sampled.AudioSystem.getAudioInputStream;
import static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;

public class Sip {

	public static void main(String[] args) {
		final Sip player = new Sip();
		player.play("paj.au");
	}

	/*
	 * metodo encargado de reproducir el audio. Recibe la "url" del fichero
	 */
	public void play(String url) {
		// transforma la "url" en una variable de tipo "file"
		final File fichero = new File(url);
		// asigna la "salida" de audio en la variable "entrada", controlando los
		// posibles errores
		System.out.println(fichero.getAbsolutePath());
		try (final AudioInputStream entrada = getAudioInputStream(fichero)) {
			// asigna el formato de "entrada" en la variable "formatoSalida", en base a las
			// caracteristicas obtenidas el el metodo get
			final AudioFormat formatoSalida = getSalidaFormato(entrada.getFormat());
			// creacion de la variable "informacion" que gestiona las "lineas" de datos en
			// base a un formato, que lo obtiene de "formatoSalida"
			final Info informacion = new Info(SourceDataLine.class, formatoSalida);
			/*
			 * creacion de la "pistaAudio" usando la variable "informacion", con el metodo
			 * AudioSystem, pero "casteandolo" como el mismo tipo de variable que
			 * "pistaAudio"
			 */
			try (final SourceDataLine pistaAudio = (SourceDataLine) AudioSystem.getLine(informacion)) {
				// si la pista de audio no esta vacia, la reproduce
				if (pistaAudio != null) {
					pistaAudio.open(formatoSalida);
					pistaAudio.start();
					stream(getAudioInputStream(formatoSalida, entrada), pistaAudio);
					pistaAudio.drain();
					pistaAudio.stop();
				}
			}

		} catch (UnsupportedAudioFileException | LineUnavailableException | IOException e) {
			throw new IllegalStateException(e);
		}
	}

	/**
	 * 
	 * @param Formato
	 * @return AudioFormat con los canales de salida y el ratio
	 */
	private AudioFormat getSalidaFormato(AudioFormat Formato) {
		final int canal = Formato.getChannels();
		final float ratio = Formato.getSampleRate();
		return new AudioFormat(PCM_SIGNED, ratio, 16, canal, canal * 2, ratio, false);
	}

	/**
	 * 
	 * @param formato
	 *            Especifica el formato y longitud de la pista
	 * @param pistaAudio
	 *            Los "bytes" con la "cancion" que se tienen que reproducir
	 * @throws IOException
	 */
	private void stream(AudioInputStream formato, SourceDataLine pistaAudio) throws IOException {
		final byte[] buffer = new byte[4096];
		for (int i = 0; i != -1; i = formato.read(buffer, 0, buffer.length)) {
			pistaAudio.write(buffer, 0, i);
		}
	}
}
